[tool.poetry]
name = "omi"
version = "1.0.0"
description = "A library to process and translate open energy metadata."
authors = [
    "Hendrik Huyskens <hendrik.huyskens@rl-institut.de>",
    "Jonas Huber <jonas.huber@rl-institut.de>",
    "Martin Glauer <martinglauer89@gmail.com>"
]
readme = "README.rst"
license = "AGPL-3.0"

[tool.poetry.dependencies]
python = ">=3.9,<3.13"
click = "^8.1.7"
rdfLib = "^7.0.0"
python-dateutil = "^2.9.0"
jsonschema = "^4.22.0"
oemetadata = ">=1.5.2"
frictionless = "^5.17.0"
pandas = "^2.2.2"

[tool.poetry.group.dev.dependencies]
tox = "^4.15.0"
pytest = "^8.2.1"
pre-commit = "^3.7.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[tool.ruff]
line-length = 120
select = ["ALL"]
exclude = [
  "manage.py",
  "digiplan/utils/ogr_layer_mapping.py",
  "config/wsgi.py",
  "digiplan/contrib/*",
  "merge_local_dotenvs_in_dotenv.py",
  "digiplan/utils/context_processors.py"
]
ignore = [
  "I001",    # Import block is un-sorted or un-formatted (done by isort)
  "D203",    # 1 blank line required before class docstring
  "D212",    # Multi-line docstring summary should start at the first line pydocstyle
  "ANN101",  # Missing type annotation for `self` in method
  "ANN102",  # Missing type annotation for `cls` in classmethod
  "ANN003",  # Missing type annotation for `**kwargs`
  "EM102",   # Exception must not use an f-string literal, assign to variable first
  "TRY003",  # Avoid specifying long messages outside the exception class
  "S101",    # Use of `assert` detected
  "UP007",   # Use `X | Y` for type annotations
  "B905",    # `zip()` without an explicit `strict=` parameter
  "FIX001",  # Line contains FIXME
  "FIX002",  # Line contains TODO
  "RET504",  # Unnecessary variable assignment before `return` statement
  "G004",    # Logging statement uses f-string
  "PD011",   # Use `.to_numpy()` instead of `.values`  (does not work out of the box)
  "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
  "UP038",   # (non-pep604-isinstance)
]
fix = true
show-fixes = true
unfixable = ["UP007", "I001"]

[tool.ruff.per-file-ignores]
"tests/*" = [
  "PLR2004", # Magic value used in comparison
  "ANN201",  # Missing return type annotation for public function
]
"*/__init__.py" = [
  "D104",  # Missing docstring in public package
]
